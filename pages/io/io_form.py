import timeimport copyfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.common.keys import Keysfrom configurations.generic_modules import step_printerfrom locators.io.io_form_locator import IoFormLocatorsfrom pages.base_page import BasePageio_information = {'io_main_information': {}, 'client_profile': {}, 'billing_entity': {}, 'io_object': {},                  'total_media_budget': {}, 'billing_information': {}}class DspDashboardIoForm(BasePage):    def __init__(self, driver):        super().__init__(driver)    def provide_io_data_and_save(self, io_data, edit_io=False):        step_printer("IO_MAIN_INFORMATION")        self.provide_io_main_information(io_data)        step_printer("IO_CLIENT_PROFILE")        self.provide_io_client_profile_info(io_data, edit_io)        if edit_io:            step_printer("IO_BILLING_ENTITY")            self.provide_io_billing_entity_info(io_data)        step_printer("IO_OBJECT")        self.provide_io_object_info(io_data, edit_io)        step_printer('IO_TOTAL_MEDIA_BUDGET')        self.provide_io_total_media_budget_info(io_data)        step_printer('IO_BILLING_INFORMATION')        self.provide_io_billing_information(io_data)        return self.driver.current_url    def provide_multi_io_data_and_save(self, io_data, index):        multi_io_information = copy.deepcopy(io_data)        step_printer("IO_MAIN_INFORMATION for the iteration: " + str(index) + "")        self.provide_io_main_information(multi_io_information)        if index == 1:            self.click_on_element(IoFormLocators.date_field_locator)            self.wait_for_presence_of_element(IoFormLocators.date_field_locator).send_keys(Keys.COMMAND + 'a')            self.wait_for_presence_of_element(IoFormLocators.date_field_locator).send_keys(Keys.DELETE)            self.set_value_into_specific_input_field(IoFormLocators.date_label,                                                     self.get_specific_date_with_specific_format("%d %b, %Y",                                                                                                 days_to_subtract=1),                                                     tab_out=True)        step_printer("IO_CLIENT_PROFILE for the iteration: " + str(index) + "")        self.provide_io_client_profile_info(multi_io_information)        step_printer("IO_OBJECT for the iteration: " + str(index) + "")        media_budget = multi_io_information['io_object']['media_budget']        final_media_budget = media_budget.split(",")        multi_io_information['io_object']['media_budget'] = final_media_budget[index].strip()        self.provide_io_object_info(multi_io_information)        step_printer("IO_BILLING_INFORMATION for the iteration: " + str(index) + "")        currency = multi_io_information['billing_information']['currency']        final_currency = currency.split(",")        multi_io_information['billing_information']['currency'] = final_currency[index].strip()        self.provide_io_billing_information(multi_io_information, for_multi_io=True)        return self.driver.current_url    def provide_io_main_information(self, io_data):        self.set_value_into_specific_input_field(IoFormLocators.io_title_label,                                                 io_data['io_main_information']['io_title'])    def provide_io_client_profile_info(self, io_data, edit_io=False):        if edit_io:            self.set_value_into_specific_input_field(IoFormLocators.email_label, io_data['client_profile']['email'])            self.set_value_into_specific_input_field(IoFormLocators.contact_label, io_data['client_profile']['contact'])        else:            self.select_dropdown_value(IoFormLocators.client_label, io_data['client_profile']['client'])            time.sleep(self.FIVE_SEC_DELAY)    def provide_io_billing_entity_info(self, io_data):        self.select_dropdown_value(IoFormLocators.sales_manager_label, io_data['billing_entity']['sales_manager'])        time.sleep(self.TWO_SEC_DELAY)    def provide_io_object_info(self, io_data, edit_io=False):        self.select_from_modal(io_data['io_object']['campaign'], IoFormLocators.campaign_label)        time.sleep(self.TWO_SEC_DELAY)        self.set_text_using_tag_attribute(self.input_tag, self.class_attribute,                                          IoFormLocators.form_control_media_budget_class, io_data['io_object'][                                              'media_budget'])        time.sleep(self.TWO_SEC_DELAY)        if edit_io:            self.click_on_element(IoFormLocators.channel_dropdown_item_locator)        else:            self.click_on_element(IoFormLocators.channel_dropdown_locator)        self.set_value_into_element(IoFormLocators.channel_text_field_locator,                                    io_data['io_object']['channel_service'] + Keys.ENTER)        if not edit_io:            self.select_dropdown_value(IoFormLocators.country_label, io_data['io_object']['country'])    def provide_io_total_media_budget_info(self, io_data):        self.set_value_into_specific_input_field(IoFormLocators.notes_label, io_data['total_media_budget']['notes'],                                                 True)        self.select_dropdown_value(IoFormLocators.io_execution_comment_label,                                   io_data['total_media_budget']['io_execution_comment'])    def provide_io_billing_information(self, io_data, for_multi_io=False):        if for_multi_io is False:            self.select_specific_radio_button(io_data['billing_information']['invoice_payment_type'])            self.select_dropdown_value(IoFormLocators.invoice_status_label,                                       io_data['billing_information']['invoice_status'])        self.select_dropdown_value(IoFormLocators.currency_label, io_data['billing_information']['currency'])        time.sleep(2)        if self.is_alert_popup_available(2):            self.accept_alert()        self.set_value_into_specific_input_field(IoFormLocators.vat_label, io_data['billing_information']['vat'],                                                 tab_out=True)        self.set_value_into_element(IoFormLocators.discount_field_locator, io_data['billing_information']['discount'])        self.click_on_element(IoFormLocators.save_and_generate_io_button_locator)        time.sleep(2)        if self.is_alert_popup_available(2):            self.accept_alert()        self.wait_for_visibility_of_element(IoFormLocators.success_message_locator)    def get_success_message(self):        return self.get_element_text(IoFormLocators.success_message_locator)    def get_io_information_from_gui(self, io_data):        self.reset_io_information()        time.sleep(self.TWO_SEC_DELAY)        self.get_io_main_information(io_data)        self.get_io_client_profile_info()        self.get_io_billing_entity_info()        self.get_io_object_info()        self.get_io_total_media_budget_info()        self.get_io_billing_information()        return io_information    def get_io_main_information(self, io_data):        locator = (By.XPATH, "//input[@value='" + io_data['io_main_information']['io_title'] + "']")        self.wait_for_visibility_of_element(locator)        io_information['io_main_information']['io_title'] = self.get_value_from_specific_input_field(            IoFormLocators.io_title_label)    def get_io_client_profile_info(self):        io_information['client_profile']['client'] = self.get_text_using_tag_attribute(            self.span_tag, self.id_attribute, IoFormLocators.select2_client_container_id)        io_information['client_profile']['email'] = self.get_value_from_specific_input_field(IoFormLocators.email_label)        io_information['client_profile']['contact'] = self.get_value_from_specific_input_field(            IoFormLocators.contact_label)        io_information['client_profile']['responsible_adOps'] = self.get_text_using_tag_attribute(            self.span_tag, self.id_attribute, IoFormLocators.select2_responsible_adops_container_id)        io_information['client_profile']['client_company'] = self.get_text_using_tag_attribute(            self.span_tag, self.id_attribute, IoFormLocators.select2_company_id_container_id)    def get_io_billing_entity_info(self):        io_information['billing_entity']['company_profile'] = self.get_text_using_tag_attribute(            self.span_tag, self.id_attribute, IoFormLocators.select2_company_profile_container_id)        io_information['billing_entity']['sales_manager'] = self.get_text_using_tag_attribute(            self.span_tag, self.id_attribute, IoFormLocators.select2_sales_manager_container_id)    def get_io_object_info(self):        io_information['io_object']['campaign'] = self.get_selected_value_of_modal_from_field(            select_tag_id_or_class="", field_label=IoFormLocators.campaign_label)        io_information['io_object']['media_budget'] = self.get_text_using_tag_attribute(            self.input_tag, self.name_attribute, IoFormLocators.total_currency_name)        io_information['io_object']['channel_service'] = self.get_element_text(            IoFormLocators.channel_dropdown_item_locator)        io_information['io_object']['country'] = self.get_text_using_tag_attribute(self.td_tag, self.class_attribute,                                                                                   IoFormLocators.country_row_class)        io_information['io_object']['campaign_type'] = self.get_text_using_tag_attribute(            self.td_tag, self.class_attribute, IoFormLocators.campaign_type_class)    def get_io_total_media_budget_info(self):        io_information['total_media_budget']['total_media_budget_amount'] = self.get_text_using_tag_attribute(            self.div_tag, self.class_attribute, IoFormLocators.first_total_media_budget_class)        io_information['total_media_budget']['io_execution_comment'] = self.get_text_using_tag_attribute(            self.span_tag, self.id_attribute, IoFormLocators.select2_io_execution_comment_id_container_id)        io_information['total_media_budget']['notes'] = self.get_value_from_specific_input_field(            IoFormLocators.notes_label, is_textarea=True)    def get_io_billing_information(self):        io_information['billing_information']['invoice_payment_type'] = self.get_element_text(            IoFormLocators.payment_type_checked_radio_button_locator)        io_information['billing_information']['currency'] = self.get_text_using_tag_attribute(            self.span_tag, self.id_attribute, IoFormLocators.select2_currency_container_id)        io_information['billing_information']['invoice_status'] = self.get_element_text(            IoFormLocators.invoice_status_selected_item_locator)        io_information['billing_information']['send_feedback_after_io_closed_checkbox_status'] = \            self.get_checkbox_status(IoFormLocators.send_feedback_after_io_closed_label, value="1")        io_information['billing_information']['signed_io_checkbox_status'] = \            self.get_checkbox_status(IoFormLocators.signed_io_label, value="1")        self.click_on_element(IoFormLocators.payment_details_section_locator)        io_information['billing_information']['currency_rate'] = self.get_value_from_specific_input_field(            IoFormLocators.currency_rate_label)        io_information['billing_information']['vat'] = self.get_value_from_specific_input_field(            IoFormLocators.vat_label)        io_information['billing_information']['discount'] = self.get_text_using_tag_attribute(            self.input_tag, self.name_attribute, IoFormLocators.discount_name)        io_information['billing_information']['payment_term_days'] = self.get_value_from_specific_input_field(            IoFormLocators.payment_term_days_label)    def get_specific_finance_profile_status(self, label):        locator = (By.XPATH, "//li[contains(text(), '" + label + "')]")        text = self.get_element_text(locator)        fin_text = text.split(":")        return fin_text[1].strip()    def click_on_specific_form_nav_option(self, option_name):        locator = (By.XPATH, "//a[normalize-space()='" + option_name + "']")        self.click_on_element(locator, click_on_presence_of_element=True)    def get_text_from_specific_media_budget_table(self, tr_id, td_class_attribute_value, row_number=1):        locator = (            By.XPATH,            "(//tr[@id='" + tr_id + "']//td[@class='" + td_class_attribute_value + "'])[" + str(row_number) + "]")        text = self.wait_for_presence_of_element(locator).text        return text    @staticmethod    def reset_io_information():        global io_information        io_information = {'io_main_information': {}, 'client_profile': {}, 'billing_entity': {}, 'io_object': {},                          'total_media_budget': {}, 'billing_information': {}}